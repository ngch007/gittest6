var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty =
  $jscomp.ASSUME_ES5 || 'function' == typeof Object.defineProperties
    ? Object.defineProperty
    : function(a, b, c) {
        a != Array.prototype && a != Object.prototype && (a[b] = c.value);
      };
$jscomp.getGlobal = function(a) {
  return 'undefined' != typeof window && window === a
    ? a
    : 'undefined' != typeof global && null != global
    ? global
    : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function(a, b, c, d) {
  if (b) {
    c = $jscomp.global;
    a = a.split('.');
    for (d = 0; d < a.length - 1; d++) {
      var e = a[d];
      e in c || (c[e] = {});
      c = c[e];
    }
    a = a[a.length - 1];
    d = c[a];
    b = b(d);
    b != d &&
      null != b &&
      $jscomp.defineProperty(c, a, { configurable: !0, writable: !0, value: b });
  }
};
$jscomp.polyfill(
  'Array.prototype.fill',
  function(a) {
    return a
      ? a
      : function(a, c, d) {
          var b = this.length || 0;
          0 > c && (c = Math.max(0, b + c));
          if (null == d || d > b) d = b;
          d = Number(d);
          0 > d && (d = Math.max(0, b + d));
          for (c = Number(c || 0); c < d; c++) this[c] = a;
          return this;
        };
  },
  'es6',
  'es3'
);
$jscomp.findInternal = function(a, b, c) {
  a instanceof String && (a = String(a));
  for (var d = a.length, e = 0; e < d; e++) {
    var f = a[e];
    if (b.call(c, f, e, a)) return { i: e, v: f };
  }
  return { i: -1, v: void 0 };
};
$jscomp.polyfill(
  'Array.prototype.find',
  function(a) {
    return a
      ? a
      : function(a, c) {
          return $jscomp.findInternal(this, a, c).v;
        };
  },
  'es6',
  'es3'
);
var y =
    'function' == typeof Object.defineProperties
      ? Object.defineProperty
      : function(a, b, c) {
          a != Array.prototype && a != Object.prototype && (a[b] = c.value);
        },
  z =
    'undefined' != typeof window && window === this
      ? this
      : 'undefined' != typeof global && null != global
      ? global
      : this;
function A(a) {
  if (a) {
    for (var b = z, c = ['Array', 'prototype', 'fill'], d = 0; d < c.length - 1; d++) {
      var e = c[d];
      e in b || (b[e] = {});
      b = b[e];
    }
    c = c[c.length - 1];
    d = b[c];
    a = a(d);
    a != d && null != a && y(b, c, { configurable: !0, writable: !0, value: a });
  }
}
A(function(a) {
  return a
    ? a
    : function(a, c, d) {
        var b = this.length || 0;
        0 > c && (c = Math.max(0, b + c));
        if (null == d || d > b) d = b;
        d = Number(d);
        0 > d && (d = Math.max(0, b + d));
        for (c = Number(c || 0); c < d; c++) this[c] = a;
        return this;
      };
});
(function() {
  var a = {};
  window.f = a;
  a.a = function(a, c) {
    this.x = a;
    this.y = c;
  };
  a.a.prototype = {
    sub: function(b) {
      return new a.a(this.x - b.x, this.y - b.y);
    },
    add: function(b) {
      return new a.a(this.x + b.x, this.y + b.y);
    },
    length: function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    normalize: function(a) {
      var b = this.length();
      this.x = (this.x * a) / b;
      this.y = (this.y * a) / b;
    },
    toString: function() {
      return '[' + this.x + ',' + this.y + ']';
    },
    fa: function(a) {
      return 1e-6 > Math.abs(a.x - this.x) && 1e-6 > Math.abs(a.y - this.y) ? !0 : !1;
    },
    clone: function() {
      return new a.a(this.x, this.y);
    },
    set: function(a) {
      this.x = a.x;
      this.y = a.y;
    },
  };
  a.a.g = function(b, c, d) {
    return new a.a(b.x * d + c.x * (1 - d), b.y * d + c.y * (1 - d));
  };
  a.a.f = function(a, c) {
    return Math.sqrt((c.x - a.x) * (c.x - a.x) + (c.y - a.y) * (c.y - a.y));
  };
  a.S = function(a, c, d, e, f) {
    this.F = a;
    this.G = c;
    this.h = d;
    this.i = e;
    this.end = f;
  };
  a.T = function() {
    this.v = -1;
    this.I = 2;
    this.ea = this.da = this.H = 0.5;
  };
  a.u = function(b, c) {
    this.w = new a.a(b, c);
    this.j = new a.a(b, c);
    this.l = new a.a(b, c);
  };
  a.A = function(a, c, d, e, f, g) {
    this.aa = a;
    this.ba = c;
    this.ca = d;
    this.d = e;
    this.e = f;
    this.ga = g;
  };
  a.A.prototype = {
    ha: function() {
      this.aa = 1;
      this.ba = this.e = this.ca = 0;
      this.d = 1;
      this.ga = 0;
    },
    rotate: function(b) {
      var c = Math.cos(b);
      b = Math.sin(b);
      return new a.A(c, b, -b, c, 0, 0);
    },
    ia: function(b) {
      return new a.a(
        this.aa * b.x + this.ca * b.y + this.e,
        this.ba * b.x + this.d * b.y + this.ga
      );
    },
  };
  a.b = function() {};
  a.b.g = function(b, c, d, e) {
    c = (c.y - b.y) / (c.x - b.x);
    e = (e.y - d.y) / (e.x - d.x);
    if (c == e) return null;
    if (isFinite(c)) {
      if (isFinite(e)) {
        var f = b.y - c * b.x;
        d = d.y - e * d.x;
        b = (f - d) / (e - c);
      } else (f = b.y - c * b.x), (b = d.x);
      d = c * b + f;
    } else (b = b.x), (d = d.y - e * d.x), (d = e * b + d);
    return new a.a(b, d);
  };
  a.b.f = function(a, c, d) {
    d = d.sub(c);
    a = a.sub(c);
    return 0 < d.x * a.y - d.y * a.x ? !0 : !1;
  };
  a.b.R = function(b, c, d, e, f, g) {
    g = Math.sqrt(Math.max(Math.max(a.a.f(c, d), a.a.f(c, e)), a.a.f(d, f))) * (g || 1);
    30 > g && (g = 30);
    for (var h, k, m = 0; 1 >= m; m += 1 / g)
      (h =
        Math.pow(m, 3) * (d.x + 3 * (e.x - f.x) - c.x) +
        3 * Math.pow(m, 2) * (c.x - 2 * e.x + f.x) +
        3 * m * (e.x - c.x) +
        c.x),
        (k =
          Math.pow(m, 3) * (d.y + 3 * (e.y - f.y) - c.y) +
          3 * Math.pow(m, 2) * (c.y - 2 * e.y + f.y) +
          3 * m * (e.y - c.y) +
          c.y),
        b.push(new a.a(h, k));
  };
  a.b.o = function(b, c, d, e, f) {
    var g = Math.sqrt(Math.max(Math.max(a.a.f(c, d), a.a.f(c, e)), a.a.f(d, e))) * (f || 1);
    10 > g && (g = 40);
    60 < g && (g = 60);
    for (var h = 0; 1 >= h; h += 1 / g)
      (f = (1 - h) * (1 - h) * c.x + 2 * h * (1 - h) * e.x + h * h * d.x),
        b.push(new a.a(f, (1 - h) * (1 - h) * c.y + 2 * h * (1 - h) * e.y + h * h * d.y));
    b.push(new a.a(d.x, d.y));
  };
  a.b.ra = function(b, c, d) {
    var e = d.sub(c);
    e = b.add(new a.a(-e.y, e.x));
    c = a.a.g(c, d, 0.5).sub(a.b.g(c, d, b, e));
    return b.add(c).add(c);
  };
  a.b.s = function(b, c, d) {
    var e = a.a.f(b, c),
      f = a.a.f(c, d);
    b = d.sub(b);
    b.normalize(1);
    d = new a.u(c.x, c.y);
    d.l.x = c.x - b.x * e * 0.3;
    d.l.y = c.y - b.y * e * 0.3;
    d.j.x = c.x + b.x * f * 0.3;
    d.j.y = c.y + b.y * f * 0.3;
    return d;
  };
  a.b.K = function(b) {
    for (var c = 0, d = b.length, e = 0; e < d - 1; e++) c += a.a.f(b[e], b[e + 1]);
    return c;
  };
  a.b.qa = function(b, c) {
    var d = b.length;
    if (0 > c) return b[0];
    if (1 < c) return b[d - 1];
    c *= a.b.K(b);
    for (var e = 0, f, g = 0; g < d - 1; g++) {
      var h = a.a.f(b[g], b[g + 1]);
      e += h;
      if (e >= c) {
        f = a.a.g(b[g], b[g + 1], (e - c) / h);
        break;
      }
    }
    return f;
  };
  a.b.W = function(b, c, d, e, f) {
    var g = g || 'JointStyle.MITER',
      h = h || Number.NaN,
      k = b.length;
    if (!(2 > k))
      for (var m = a.b.K(b), l = 0, n, p = 0; p < k; p++)
        0 == p
          ? ((n = a.b.P(b[0], b[1], e)), c.push(n.pop()), d.push(n.pop()))
          : p == b.length - 1
          ? ((n = a.b.P(b[b.length - 1], b[b.length - 2], f)), d.push(n.pop()), c.push(n.pop()))
          : ((l += a.a.f(b[p], b[p - 1])),
            (n = a.b.ka(b[p - 1], b[p], b[p + 1], e - (l / m) * (e - f), g, h)),
            c.push(n.pop()),
            d.push(n.pop()));
  };
  a.b.ka = function(b, c, d, e, f, g) {
    var h = b.sub(c),
      k = d.sub(c);
    h.normalize(1);
    k.normalize(1);
    k = h.add(k);
    k.normalize(1);
    if (0.001 > Math.abs(k.x) && 0.001 > Math.abs(k.y)) return a.b.P(c, d, e);
    'JointStyle.MITER' == f
      ? ((d = h.x * k.x + h.y * k.y),
        (e /= Math.sqrt(1 - d * d)),
        !isNaN(g) && e > g ? k.normalize(g) : k.normalize(e))
      : 'JointStyle.ROUND' == f && k.normalize(e);
    g = c.add(k);
    e = [];
    a.b.f(g, b, c) ? (e.push(g), e.push(c.sub(k))) : (e.push(c.sub(k)), e.push(g));
    return e;
  };
  a.b.P = function(b, c, d) {
    c = c.sub(b);
    c = new a.a(c.y, -c.x);
    c.normalize(d);
    d = b.add(c);
    b = b.sub(c);
    c = [];
    c.push(b);
    c.push(d);
    return c;
  };
  a.b.m = function(a, c) {
    var b = [];
    if (2 > a.length) return b;
    if (2 == a.length) return b.push(a[0]), b.push(a[1]), b;
    a = this.oa(a, c);
    for (c = 0; c < a.length - 1; c++) {
      var e = a[c],
        f = a[c + 1];
      this.R(b, e.w, f.w, e.j, f.l, 1);
    }
    return b;
  };
  a.b.oa = function(b, c) {
    var d = [],
      e = b.length;
    if (c) {
      for (c = 0; c < e; c++)
        0 == c
          ? d.push(a.b.s(b[e - 1], b[c], b[c + 1]))
          : c == e - 1
          ? d.push(a.b.s(b[c - 1], b[c], b[0]))
          : d.push(a.b.s(b[c - 1], b[c], b[c + 1]));
      d.push(a.b.s(b[e - 1], b[0], b[1]));
    } else
      for (c = 0; c < e; c++)
        0 == c || c == e - 1
          ? d.push(new a.u(b[c].x, b[c].y))
          : d.push(a.b.s(b[c - 1], b[c], b[c + 1]));
    return d;
  };
  a.b.U = function(b, c, d) {
    if (0 > (b.x - c.x) * (d.x - c.x) + (b.y - c.y) * (d.y - c.y)) var e = a.a.f(b, c);
    else if (0 > (b.x - d.x) * (c.x - d.x) + (b.y - d.y) * (c.y - d.y)) e = a.a.f(b, d);
    else {
      var f = b.sub(c),
        g = b.sub(d);
      f = Math.abs(f.x * g.y - f.y * g.x);
      d = a.a.f(c, d);
      0 == d ? (e = a.a.f(b, c)) : (e = f / d);
    }
    return e;
  };
  a.b.na = function(b) {
    for (var c = [], d = b.length, e = 0; e < d - 1; e++) {
      var f = b[e],
        g = b[e + 1];
      a.b.R(c, f.w, g.w, f.l, g.j, 3);
    }
    a.b.R(c, b[d - 1].w, b[0].w, b[d - 1].l, b[0].j, 3);
    return c;
  };
  a.c = function() {};
  a.c.m = function(b, c) {
    b = a.b.m(b, c);
    c = [];
    for (var d = 0; d < b.length; d++) {
      var e = b[d];
      c.push([e.x, e.y]);
    }
    return c;
  };
  a.c.Y = function(b, c, d) {
    b = a.c.ja(b, c, d);
    b = a.c.la(b[2], b[0], b[1]);
    b = a.b.na(b);
    c = [];
    for (d = 0; d < b.length; d++) {
      var e = b[d];
      c.push([e.x, e.y]);
    }
    return c;
  };
  a.c.ja = function(b, c, d) {
    var e = a.a.f(b, c),
      f = a.a.f(b, d),
      g = Math.max(e, a.a.f(c, d), f);
    return g == e ? a.c.M(d, b, c) : g == f ? a.c.M(c, b, d) : a.c.M(b, c, d);
  };
  a.c.M = function(b, c, d) {
    var e = d.sub(c);
    e = new a.a(e.y, -e.x);
    var f = a.b.U(b, c, d);
    e.normalize(f);
    f = a.a.g(c, d, 0.5);
    var g = [];
    a.b.f(b, c, d)
      ? (g.push(d), g.push(c), g.push(f.sub(e)))
      : (g.push(c), g.push(d), g.push(f.add(e)));
    g.push(b);
    return g;
  };
  a.c.la = function(b, c, d) {
    var e = [],
      f = a.a.f(c, d),
      g = a.a.g(c, d, 0.5),
      h = d.sub(c),
      k = new a.a(h.y, -h.x),
      m = a.b.U(b, c, d);
    k.normalize(f / 4);
    var l = new a.A();
    l.ha();
    l = l.rotate(-Math.PI / 8);
    var n = l.ia(k);
    l = new a.u(c.x, c.y);
    l.j = new a.a(c.sub(n).x, c.sub(n).y);
    l.l = new a.a(c.add(n).x, c.add(n).y);
    e.push(l);
    h.normalize(f / 4);
    l = new a.u(b.x, b.y);
    l.j = new a.a(b.sub(h).x, b.sub(h).y);
    l.l = new a.a(b.add(h).x, b.add(h).y);
    e.push(l);
    k.normalize(f / 4);
    l = new a.A();
    l.ha();
    l = l.rotate(Math.PI / 8);
    n = l.ia(k);
    l = new a.u(d.x, d.y);
    l.j = new a.a(d.add(n).x, d.add(n).y);
    l.l = new a.a(d.sub(n).x, d.sub(n).y);
    e.push(l);
    k.normalize(Math.sqrt(m));
    b = g.sub(k);
    h.normalize(f / 4);
    l = new a.u(b.x, b.y);
    l.j = new a.a(b.add(h).x, b.add(h).y);
    l.l = new a.a(b.sub(h).x, b.sub(h).y);
    e.push(l);
    return e;
  };
  a.c.B = function(b, c, d, e, f) {
    b = c.sub(b);
    d *= b.length();
    d > e && 0 < e ? b.normalize(e) : b.normalize(d);
    e = c.sub(b);
    return a.c.V(e, c, f);
  };
  a.c.J = function(b, c, d) {
    var e = c.sub(b);
    d = d ? new a.a(e.y, -e.x) : new a.a(-e.y, e.x);
    b = a.a.g(b, c, 0.5);
    e.length();
    d.x /= 8;
    d.y /= 8;
    return b.add(d);
  };
  a.c.N = function(b, c, d, e, f) {
    if (!c.fa(d)) {
      f = f || 0.5;
      var g = d.sub(c),
        h = -1 != e.v ? e.v / 2 : g.length() / 2;
      e.I = h / 2;
      g = new a.a(g.y, -g.x);
      g.normalize(e.I * f);
      var k = c.add(g),
        m = c.sub(g),
        l = d.add(g),
        n = d.sub(g);
      g.normalize(h);
      f = c.add(g);
      var p = c.sub(g),
        r = a.a.g(d, c, e.H);
      k = a.b.g(k, l, r, f);
      m = a.b.g(m, n, r, p);
      c = a.a.g(d, c, e.da);
      g = g.clone();
      g.normalize(h * e.ea);
      c.add(g);
      c.sub(g);
      b.push(k);
      b.push(f);
      b.push(d);
      b.push(p);
      b.push(m);
    }
  };
  a.c.C = function(b, c, d, e, f) {
    c = d.sub(c);
    e *= c.length();
    c.normalize(e);
    e = d.sub(c);
    a.c.N(b, e, d, f, 0.5);
  };
  a.c.V = function(b, c, d) {
    if (b.fa(c)) return new a.S(b, b, b, b, b);
    var e = c.sub(b),
      f = -1 != d.v ? d.v / 2 : e.length() / 2;
    d.I = f / 2;
    var g = new a.a(e.y, -e.x);
    g.normalize(d.I / 2);
    e = b.add(g);
    var h = b.sub(g),
      k = c.add(g),
      m = c.sub(g);
    g.normalize(f);
    var l = b.add(g),
      n = b.sub(g),
      p = a.a.g(c, b, d.H);
    k = a.b.g(e, k, p, l);
    m = a.b.g(h, m, p, n);
    b = a.a.g(c, b, d.da);
    g = g.clone();
    g.normalize(f * d.ea);
    b.add(g);
    b.sub(g);
    return new a.S(e, h, k, m, c);
  };
  a.c.X = function(b, c, d, e, f) {
    var g = [],
      h = a.c.B(b, d, 0.3, 80, f),
      k = a.c.B(c, e, 0.3, 80, f),
      m = [],
      l = [];
    a.c.C(m, b, d, 0.3, f);
    a.c.C(l, c, e, 0.3, f);
    var n = a.b.f(d, b, c),
      p = a.b.f(e, b, c);
    e = a.b.f(h.h, b, c);
    d = a.b.f(h.i, b, c);
    f = a.b.f(k.h, b, c);
    var r = a.b.f(k.i, b, c);
    if (0 == n) {
      var t = h.i,
        u = h.G,
        q = a.c.J(b, h.h, !0);
      a.b.o(g, b, h.h, q, 3);
      g = g.concat(m);
    } else {
      t = h.h;
      u = h.F;
      q = a.c.J(b, h.i, !1);
      var v = [];
      a.b.o(v, b, h.i, q, 3);
      g = g.concat(v);
      g = g.concat(m.reverse());
    }
    q = b.sub(c);
    1 == p
      ? ((h = k.i),
        (m = k.G),
        (b = a.c.Z(b, c, t, h, n == p)),
        (n = b.add(q)),
        a.c.$(g, t, u, b, n, h, m, e == d, f == r),
        (g = g.concat(l.reverse())),
        (q = a.c.J(k.h, c, !1)),
        a.b.o(g, k.h, c, q, 3))
      : ((h = k.h),
        (m = k.F),
        (b = a.c.Z(b, c, t, h, n == p)),
        (n = b.add(q)),
        a.c.$(g, t, u, b, n, h, m, e == d, f == r),
        (g = g.concat(l)),
        (q = a.c.J(k.i, c, !0)),
        a.b.o(g, k.i, c, q, 3));
    c = [];
    for (k = 0; k < g.length; k++) (l = g[k]), c.push([l.x, l.y]);
    return c;
  };
  a.c.$ = function(b, c, d, e, f, g, h, k, m) {
    d = k ? a.b.g(c, d, e, f) : d;
    f = m ? a.b.g(g, h, e, f) : h;
    d && a.b.o(b, c, e, d, 1);
    f && a.b.o(b, e, g, f, 1);
  };
  a.c.Z = function(b, c, d, e, f) {
    var g = a.a.g(b, c, 0.5),
      h = a.a.g(d, e, 0.5),
      k = b.sub(c),
      m = d.add(k);
    k = e.add(k);
    m = a.b.g(m, d, g, h);
    k = a.b.g(k, e, g, h);
    var l = a.a.f(g, m),
      n = a.a.f(g, k);
    a.b.f(d, b, c);
    a.b.f(e, b, c);
    if (f) return l < n ? a.a.g(g, m, 0.7) : a.a.g(g, k, 0.7);
    b = a.a.g(g, h, 0.9);
    return Math.min(l, n) > a.a.f(g, b) ? b : l < n ? a.a.g(m, g, 0.3) : a.a.g(k, g, 0.3);
  };
  a.c.D = function(b, c, d, e, f) {
    var g = [],
      h = c.sub(b);
    h = new a.a(h.y, -h.x);
    h.normalize(a.a.f(b, c) * e);
    e = b.add(h);
    h = b.sub(h);
    g.push(e);
    a.c.N(g, a.a.g(b, c, 0.3), c, d, f);
    g.push(h);
    b = [];
    for (c = 0; c < g.length; c++) (d = g[c]), b.push([d.x, d.y]);
    return b;
  };
  a.c.L = function(b, c, d, e, f) {
    f |= 0;
    var g = [],
      h = a.a.g(b, c, 0.5);
    if (a.b.f(b, h, d))
      var k = c,
        m = b;
    else (k = b), (m = c);
    var l = a.a.g(h, d, 0.3);
    h = a.c.V(l, d, e);
    var n = [];
    a.c.N(n, l, d, e);
    l = h.F.add(h.F.sub(h.h));
    e = h.G.add(h.G.sub(h.i));
    a.b.o(g, k, h.h, l);
    g = g.concat(n);
    k = [];
    a.b.o(k, h.i, m, e);
    g = g.concat(k);
    1 == f && g.push(a.a.g(a.a.g(b, c, 0.5), d, 0.8));
    b = [];
    for (c = 0; c < g.length; c++) (d = g[c]), b.push([d.x, d.y]);
    return b;
  };
  a.c.O = function(b, c, d) {
    d = d || 0.07;
    var e = b.length,
      f = b[e - 1],
      g = a.b.s(b[e - 3], b[e - 2], f),
      h = a.c.B(g.j, f, 0.5, 200, c);
    e = [];
    a.c.C(e, g.j, f, 0.5, c);
    f = [];
    c = [];
    a.b.W(b, f, c, a.b.K(b) * d, a.a.f(h.h, h.i) / 2);
    f[f.length - 1] = h.h;
    c[c.length - 1] = h.i;
    b = a.b.m(f);
    d = a.b.m(c);
    e = b.concat(e);
    e = e.concat(d.reverse());
    b = [];
    for (d = 0; d < e.length; d++) (h = e[d]), b.push([h.x, h.y]);
    return b;
  };
  a.c.O = function(b, c, d) {
    d = d || 0.07;
    var e = b.length,
      f = b[e - 1],
      g = a.b.s(b[e - 3], b[e - 2], f),
      h = a.c.B(g.j, f, 0.5, 200, c);
    e = [];
    a.c.C(e, g.j, f, 0.5, c);
    f = [];
    c = [];
    a.b.W(b, f, c, a.b.K(b) * d, a.a.f(h.h, h.i) / 2);
    f[f.length - 1] = h.h;
    c[c.length - 1] = h.i;
    b = a.b.m(f);
    d = a.b.m(c);
    e = b.concat(e);
    e = e.concat(d.reverse());
    b = [];
    for (d = 0; d < e.length; d++) (h = e[d]), b.push([h.x, h.y]);
    return b;
  };
  a.c.pa = function(b, c, d, e) {
    var f = null,
      g = new a.T();
    if (2001 == b) {
      if (4 > c.length) return;
      f = a.c.X(c[0], c[1], c[2], c[3], g);
    } else
      2003 == b
        ? (f = a.c.D(c[0], c[1], g, 0.125, 0.5))
        : 2004 == b
        ? ((g.v = 0.8 * a.a.f(c[0], c[1])), (g.H = 0), (f = a.c.D(c[0], c[1], g, 0.35, 0.8)))
        : 2005 == b
        ? (f = a.c.L(c[0], c[1], c[2], g))
        : 2006 == b
        ? (f = a.c.L(c[0], c[1], c[2], g))
        : 2007 == b
        ? (f = a.c.O(c, g, 0.07))
        : 2008 == b
        ? (f = a.c.m(c, !0))
        : 2011 == b && (f = a.c.Y(c[0], c[1], c[2]));
    if (null != f) {
      e.beginPath();
      e.moveTo(f[0].x, f[0].y);
      for (b = 1; b < f.length; b++) e.lineTo(f[b].x, f[b].y);
      e.lineTo(f[0].x, f[0].y);
      e.closePath();
      e.fillStyle = d.fillColor;
      e.fill();
    }
    return f;
  };
  a.c.ma = function(b, c) {
    var d = null,
      e = new a.T();
    if (2001 == b) {
      if (4 > c.length) return;
      d = a.c.X(c[0], c[1], c[3], c[2], e);
    } else
      2003 == b
        ? (d = a.c.D(c[0], c[1], e, 0.125, 0.5))
        : 2004 == b
        ? ((e.v = 0.8 * a.a.f(c[0], c[1])), (e.H = 0), (d = a.c.D(c[0], c[1], e, 0.35, 0.8)))
        : 2005 == b
        ? (d = a.c.L(c[0], c[1], c[2], e, !1))
        : 2006 == b
        ? (d = a.c.L(c[0], c[1], c[2], e, !0))
        : 2007 == b
        ? (d = a.c.O(c, e, 0.07))
        : 2008 == b
        ? (d = a.c.m(c, !0))
        : 2011 == b && (d = a.c.Y(c[0], c[1], c[2]));
    return d;
  };
  window.H5JB_getJBArray = function(b, c) {
    for (var d = [], e = 0; e < c.length; e += 2) d.push(new a.a(c[e], c[e + 1]));
    return a.c.ma(b, d);
  };
})();
var g_symbolFrame = {},
  defaultSymbolStyles = {
    fill: '#00ff00',
    stroke: '#ff0000',
    strokeWidth: 1.5,
    textx: 500,
    texty: 800,
    symbolSize: 100,
    text: '',
    textcolor: '#ff0000',
    font_size: 30,
  };
function clone(a, b) {
  if (null == a || 'object' != typeof a || (a.constructor != Object && a.constructor != Array))
    return a;
  if (
    a.constructor == Date ||
    a.constructor == RegExp ||
    a.constructor == Function ||
    a.constructor == String ||
    a.constructor == Number ||
    a.constructor == Boolean
  )
    return new a.constructor(a);
  b = b || new a.constructor();
  for (var c in a) b[c] = 'undefined' == typeof b[c] ? clone(a[c], null) : b[c];
  return b;
}
function copyOptions(a, b) {
  a = clone(a);
  for (var c in b) void 0 === a[c] && (a[c] = clone(b[c]));
  return a;
}
function showSymbolPanel(a, b) {
  layer.open({
    type: 2,
    shade: 0,
    skin: 'layer-mars-dialog animation-scale-up',
    id: 'LAY_layuipro',
    name: 'MySymbolFrame',
    title: '\u7b26\u53f7\u5e93\u7ec4\u4ef6',
    maxmin: !1,
    shadeClose: !0,
    offset: [a, b],
    area: ['388px', '620px'],
    moveType: 1,
    content: '/view.html',
    success: function(a) {
      g_symbolFrame._dom = a;
    },
  });
}
function openJB() {
  showSymbolPanel(50, 50);
}
function getControlNum(a) {
  return 2001 == a ? 4 : 2003 == a || 2004 == a ? 2 : 2005 == a || 2006 == a || 2011 == a ? 3 : -1;
}
function startDrawingSymbol(a, b) {
  if (1 == a) {
    var c = window[g_symbolFrame._dom.find('iframe')[0].name];
    a = { symbolSize: 100 };
    a = copyOptions(a, defaultSymbolStyles);
    c = c.drawSymbol(b, a);
    b = {
      icon: GMap.canvasIcon({
        canvas: c,
        iconSize: [100, 100],
        iconAnchor: [20, 70],
        keyid: b,
        style: a,
      }),
    };
    b = new GMap.Draw.Marker(_map, b);
    b.enable();
  } else
    937 == b
      ? ((b = { maxPoints: 2, shapeOptions: { color: '#ff0000', weight: 2 } }),
        (b = new GMap.Draw.Polyline(_map, b)),
        b.enable())
      : 1184 == b
      ? ((b = { shapeOptions: { color: '#ff0000', weight: 2 } }),
        (b = new GMap.Draw.Polyline(_map, b)),
        b.enable())
      : 804 == b
      ? ((b = { shapeOptions: { color: '#ff0000', weight: 2 } }),
        (b = new GMap.Draw.Polyline(_map, b)),
        b.enable())
      : 834 == b
      ? ((b = {
          showArea: !1,
          shapeOptions: {
            stroke: !0,
            color: '#444',
            weight: 1,
            opacity: 0.8,
            fill: !0,
            fillColor: '#00ffff',
            fillOpacity: 0.2,
            clickable: !0,
          },
        }),
        (b = new GMap.Draw.Rectangle(_map, b)),
        b.enable())
      : 831 == b
      ? ((b = {
          showArea: !1,
          maxPoints: 5,
          shapeOptions: {
            stroke: !0,
            color: '#0000ff',
            weight: 1,
            opacity: 0.5,
            fill: !0,
            fillColor: null,
            fillOpacity: 0.2,
            clickable: !0,
            keyid: 2001,
          },
        }),
        (b = new GMap.Draw.Polygon(_map, b)),
        b.enable())
      : 742 == b
      ? ((b = {
          shapeOptions: {
            stroke: !0,
            color: '#444',
            weight: 1,
            opacity: 1,
            fill: !0,
            fillColor: '#00ff00',
            fillOpacity: 0.2,
            clickable: !0,
          },
        }),
        (b = new GMap.Draw.Circle(_map, b)),
        b.enable())
      : 2e3 < b &&
        ((b = {
          maxPoints: getControlNum(b),
          shapeOptions: { color: '#ff00ff', weight: 2, keyid: b },
        }),
        (b = new GMap.Draw.H5JBLineSymbol(_map, b)),
        b.enable());
}
function showEditPage(a, b, c) {
  null == window.frames.LAY_layuipro
    ? alert('\u7b26\u53f7\u9762\u677f\u672a\u5f00\u542f')
    : window[g_symbolFrame._dom.find('iframe')[0].name].showEditProperty(a, b, c);
}
function _onClick(a) {
  alert('onclick' + a);
  a = a.target.options.icon;
  alert('icon=' + a.options.keyid);
  var b = {};
  b.gid = a.options.keyid;
  showEditPage(1, b, a.options.style);
}
var DrawH5Helper = (function() {
    function a() {
      this._surfaces = [];
      this.initialiseHandlers();
      this.enhancePrimitives();
      e(this);
    }
    function b(a, c) {
      if (null == a || 'object' != typeof a || (a.constructor != Object && a.constructor != Array))
        return a;
      if (
        a.constructor == Date ||
        a.constructor == RegExp ||
        a.constructor == Function ||
        a.constructor == String ||
        a.constructor == Number ||
        a.constructor == Boolean
      )
        return new a.constructor(a);
      c = c || new a.constructor();
      for (var d in a) c[d] = 'undefined' == typeof c[d] ? b(a[d], null) : c[d];
      return c;
    }
    function c(a, c) {
      a = b(a);
      for (var d in c) void 0 === a[d] && (a[d] = b(c[d]));
      return a;
    }
    function d(a, b, c) {
      a[b] = c;
    }
    function e(a) {
      a._listeners = {};
      a.addListener = function(a, b) {
        this._listeners[a] = this._listeners[a] || [];
        this._listeners[a].push(b);
        return this._listeners[a].length;
      };
      a.executeListeners = function(a, b) {
        if (this._listeners[a.name] && 0 < this._listeners[a.name].length)
          for (b = 0; b < this._listeners[a.name].length; b++) this._listeners[a.name][b](a);
        else b && b(a);
      };
    }
    var f = [];
    a.prototype.initialiseHandlers = function() {};
    a.prototype.setListener = function(a, b, c) {
      a[b] = c;
    };
    a.prototype.muteHandlers = function(a) {
      this._handlersMuted = a;
    };
    a.prototype.registerEditableShape = function(a) {
      var b = this;
      d(a, 'mouseMove', function(c) {
        a.setHighlighted(!0);
        a._editMode || b._tooltip.showAt(c, 'Click to edit this shape');
      });
      d(a, 'mouseOut', function(c) {
        a.setHighlighted(!1);
        b._tooltip.setVisible(!1);
      });
      d(a, 'leftClick', function(b) {
        g_pickObj.obj = a;
        g_pickObj.type = 3;
        a.setEditMode(!0);
        b = { fill: !0 };
        if (null != a.material.uniforms.color) {
          var c = a.material.uniforms.color.toCssColorString();
          b.color = c;
        }
        b.gid = a.keyid;
        c = g;
        null == window.frames.LAY_layuipro
          ? alert('\u7b26\u53f7\u9762\u677f\u672a\u5f00\u542f')
          : window[k._dom.find('iframe')[0].name].showEditProperty(3, b, c);
      });
    };
    a.prototype.startDrawing = function(a) {
      this.disableAllEditMode();
      this.editCleanUp && this.editCleanUp();
      this.editCleanUp = a;
      this.muteHandlers(!0);
    };
    a.prototype.stopDrawing = function() {
      this.editCleanUp && (this.editCleanUp(), (this.editCleanUp = null));
      this.muteHandlers(!1);
    };
    a.prototype.disableAllHighlights = function() {
      this.setHighlighted(void 0);
    };
    a.prototype.setHighlighted = function(a) {
      this._highlightedSurface &&
        !this._highlightedSurface.isDestroyed() &&
        this._highlightedSurface != a &&
        this._highlightedSurface.setHighlighted(!1);
      this._highlightedSurface = a;
    };
    a.prototype.disableAllEditMode = function() {
      this.setEdited(void 0);
    };
    a.prototype.setEdited = function(a) {
      this._editedSurface &&
        !this._editedSurface.isDestroyed() &&
        this._editedSurface.setEditMode(!1);
      this._editedSurface = a;
    };
    var g = {
        fill: '#00ff00',
        stroke: '#ff0000',
        strokeWidth: 1.5,
        textx: 500,
        texty: 800,
        symbolSize: 100,
        text: '',
        textcolor: '#ff0000',
        font_size: 30,
      },
      h = (function() {
        function a() {}
        a.prototype.initialiseOptions = function(a) {
          var c = this || {};
          for (var d in a) void 0 === c[d] && (c[d] = b(a[d]));
          this._id = void 0;
          this._createPrimitive = !0;
          this._outlinePolygon = this._primitive = void 0;
        };
        a.prototype.setAttribute = function(a, b) {
          this[a] = b;
          this._createPrimitive = !0;
        };
        a.prototype.getAttribute = function(a) {
          return this[a];
        };
        a.prototype.update = function(a, b, c) {};
        a.prototype.isDestroyed = function() {
          return !1;
        };
        a.prototype.destroy = function() {};
        return a;
      })();
    a.ExtentPrimitive = (function() {
      function a(a) {
        if (!Cesium.defined(a.extent)) throw new Cesium.DeveloperError('Extent is required');
        a = c(a, defaultSurfaceOptions);
        this.keyid = 4001;
        this.initialiseOptions(a);
        this.setExtent(a.extent);
      }
      a.prototype = new h();
      a.prototype.setExtent = function(a) {
        this.setAttribute('extent', a);
      };
      a.prototype.getExtent = function() {
        return this.getAttribute('extent');
      };
      a.prototype.getGeometry = function() {
        if (Cesium.defined(this.extent))
          return new Cesium.RectangleGeometry({
            rectangle: this.extent,
            height: this.height,
            vertexFormat: Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,
            stRotation: this.textureRotationAngle,
            ellipsoid: this.ellipsoid,
            granularity: this.granularity,
          });
      };
      a.prototype.getOutlineGeometry = function() {
        return new Cesium.RectangleOutlineGeometry({ rectangle: this.extent });
      };
      return a;
    })();
    a.PolygonPrimitive = (function() {
      function a(a) {
        a = c(a, defaultSurfaceOptions);
        this.keyid = 4002;
        this.initialiseOptions(a);
        this.isPolygon = !0;
      }
      a.prototype = new h();
      a.prototype.setPositions = function(a) {
        this.setAttribute('positions', a);
      };
      a.prototype.getPositions = function() {
        return this.getAttribute('positions');
      };
      a.prototype.getGeometry = function() {};
      a.prototype.getOutlineGeometry = function() {
        return Cesium.PolygonOutlineGeometry.fromPositions({ positions: this.getPositions() });
      };
      return a;
    })();
    a.ArrowPrimitive = (function() {
      function a(a) {
        this.isPolygon = !0;
        this.keyid = a.keyid;
      }
      a.prototype = new h();
      a.prototype.setPositions = function(a) {
        this.setAttribute('positions', a);
      };
      a.prototype.getPositions = function() {
        return this.getAttribute('positions');
      };
      a.prototype.getGeometry = function() {
        if (Cesium.defined(this.positions) && !(2 > this.positions.length)) {
          var a = !1,
            b = [];
          if (2001 == this.keyid) {
            if (4 <= this.positions.length) {
              for (a = 0; 4 > a; a++) {
                var c = Cesium.Cartographic.fromCartesian(this.positions[a]),
                  d = Cesium.Math.toDegrees(c.longitude);
                c = Cesium.Math.toDegrees(c.latitude);
                b.push(parseFloat(d));
                b.push(parseFloat(c));
              }
              a = !0;
            }
          } else if (2003 == this.keyid || 2004 == this.keyid) {
            for (a = 0; 2 > a; a++)
              (c = Cesium.Cartographic.fromCartesian(this.positions[a])),
                (d = Cesium.Math.toDegrees(c.longitude)),
                (c = Cesium.Math.toDegrees(c.latitude)),
                b.push(parseFloat(d)),
                b.push(parseFloat(c));
            a = !0;
          } else if (2005 == this.keyid || 2006 == this.keyid) {
            if (3 <= this.positions.length) {
              for (a = 0; 3 > a; a++)
                (c = Cesium.Cartographic.fromCartesian(this.positions[a])),
                  (d = Cesium.Math.toDegrees(c.longitude)),
                  (c = Cesium.Math.toDegrees(c.latitude)),
                  b.push(parseFloat(d)),
                  b.push(parseFloat(c));
              a = !0;
            }
          } else if (2011 == this.keyid) {
            if (3 <= this.positions.length) {
              for (a = 0; 3 > a; a++)
                (c = Cesium.Cartographic.fromCartesian(this.positions[a])),
                  (d = Cesium.Math.toDegrees(c.longitude)),
                  (c = Cesium.Math.toDegrees(c.latitude)),
                  b.push(parseFloat(d)),
                  b.push(parseFloat(c));
              a = !0;
            }
          } else if (2008 == this.keyid && 3 <= this.positions.length) {
            for (a = 0; a < this.positions.length; a++)
              (c = Cesium.Cartographic.fromCartesian(this.positions[a])),
                (d = Cesium.Math.toDegrees(c.longitude)),
                (c = Cesium.Math.toDegrees(c.latitude)),
                b.push(parseFloat(d)),
                b.push(parseFloat(c));
            a = !0;
          }
          if (1 == a) {
            b = H5JB_getJBArray(this.keyid, b);
            a = [];
            for (d = 0; d < b.length; d++) a.push(b[d][0]), a.push(b[d][1]);
            b = Cesium.Cartesian3.fromDegreesArray(a);
            return Cesium.PolygonGeometry.fromPositions({
              positions: b,
              height: this.height,
              vertexFormat: Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,
              stRotation: this.textureRotationAngle,
              ellipsoid: this.ellipsoid,
              granularity: this.granularity,
            });
          }
          return Cesium.PolygonGeometry.fromPositions({
            positions: this.positions,
            height: this.height,
            vertexFormat: Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,
            stRotation: this.textureRotationAngle,
            ellipsoid: this.ellipsoid,
            granularity: this.granularity,
          });
        }
      };
      a.prototype.getOutlineGeometry = function() {
        return Cesium.PolygonOutlineGeometry.fromPositions({ positions: this.getPositions() });
      };
      return a;
    })();
    a.CirclePrimitive = (function() {
      function a(a) {}
      a.prototype = new h();
      a.prototype.setCenter = function(a) {
        this.setAttribute('center', a);
      };
      a.prototype.setRadius = function(a) {
        this.setAttribute('radius', Math.max(0.1, a));
      };
      a.prototype.getCenter = function() {
        return this.getAttribute('center');
      };
      a.prototype.getRadius = function() {
        return this.getAttribute('radius');
      };
      a.prototype.getGeometry = function() {
        if (Cesium.defined(this.center) && Cesium.defined(this.radius))
          return new Cesium.CircleGeometry({
            center: this.center,
            radius: this.radius,
            height: this.height,
            vertexFormat: Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,
            stRotation: this.textureRotationAngle,
            ellipsoid: this.ellipsoid,
            granularity: this.granularity,
          });
      };
      a.prototype.getOutlineGeometry = function() {
        return new Cesium.CircleOutlineGeometry({
          center: this.getCenter(),
          radius: this.getRadius(),
        });
      };
      return a;
    })();
    a.EllipsePrimitive = (function() {
      function a(a) {}
      a.prototype = new h();
      a.prototype.setCenter = function(a) {
        this.setAttribute('center', a);
      };
      a.prototype.getCenter = function() {
        return this.getAttribute('center');
      };
      a.prototype.getRotation = function() {
        return this.getAttribute('rotation');
      };
      a.prototype.getGeometry = function() {
        if (
          Cesium.defined(this.center) &&
          Cesium.defined(this.semiMajorAxis) &&
          Cesium.defined(this.semiMinorAxis)
        )
          return new Cesium.EllipseGeometry({
            ellipsoid: this.ellipsoid,
            center: this.center,
            semiMajorAxis: this.semiMajorAxis,
            semiMinorAxis: this.semiMinorAxis,
            rotation: this.rotation,
            height: this.height,
            vertexFormat: Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,
            stRotation: this.textureRotationAngle,
            granularity: this.granularity,
          });
      };
      a.prototype.getOutlineGeometry = function() {
        return new Cesium.EllipseOutlineGeometry({
          center: this.getCenter(),
          semiMajorAxis: this.getSemiMajorAxis(),
          semiMinorAxis: this.getSemiMinorAxis(),
          rotation: this.getRotation(),
        });
      };
      return a;
    })();
    a.PolylinePrimitive = (function() {
      function a(a) {}
      a.prototype = new h();
      a.prototype.setPositions = function(a) {
        this.setAttribute('positions', a);
      };
      a.prototype.setWidth = function(a) {
        this.setAttribute('width', a);
      };
      a.prototype.getPositions = function() {
        return this.getAttribute('positions');
      };
      a.prototype.getWidth = function() {
        return this.getAttribute('width');
      };
      a.prototype.getGeometry = function() {};
      return a;
    })();
    a.prototype.startDrawingPtSymbol = function(a, b, c) {};
    a.prototype.startDrawingPolygon = function(a) {};
    a.prototype.startDrawingArrow = function(a) {};
    a.prototype.startDrawingPolyline = function(a) {};
    a.prototype.startDrawingPolyshape = function(a, b) {};
    a.prototype.startDrawingArrowShape = function(a, b) {};
    a.prototype.startDrawingExtent = function(a) {};
    a.prototype.startDrawingCircle = function(a) {};
    a.prototype.addPtSymAtPos = function(a, b) {};
    a.prototype.startDrawingSymbol = function(a, b) {};
    a.prototype.startDrawingImgSymbol = function(a) {};
    a.prototype.removeAll = function() {
      f = [];
    };
    a.prototype.isArray = function(a) {
      return 'object' == typeof a && a.constructor == Array;
    };
    a.prototype.getPositionsFromJson = function(a) {
      if (!a) return null;
      switch (a.type) {
        case 'Point':
          return (
            (a = a.coordinates),
            1 == a.length && this.isArray(a[0]) && (a = a[0]),
            this.lonLatToCartesian(a)
          );
        case 'MultiPoint':
        case 'LineString':
          return this.lonLatsToCartesians(a.coordinates);
        case 'MultiLineString':
        case 'Polygon':
          return this.lonLatsToCartesians(a.coordinates[0]);
        case 'MultiPolygon':
          return this.lonLatsToCartesians(a.coordinates[0][0]);
        case 'Arrow':
          return this.lonLatsToCartesians(a.coordinates);
        default:
          throw Error('Invalid GeoJSON object.');
      }
    };
    a.prototype.addPtSymbolStyle = function(a, b, c, d) {
      k._dom.find('iframe');
    };
    a.prototype.readPtSymbol = function(a) {
      for (var b = JSON.parse(a).features, c = 0; c < b.length; c++) {
        a = b[c];
        switch (a.geometry.type) {
          case 'MultiPolygon':
          case 'Polygon':
            a.properties.type = 'polygon';
            break;
          case 'MultiLineString':
          case 'LineString':
            a.properties.type = 'polyline';
            break;
          case 'MultiPoint':
          case 'Point':
            a.properties.type = 'point';
            break;
          case 'Arrow':
            a.properties.type = 'Arrow';
        }
        if ('point' == a.properties.type) {
          var d = this.getPositionsFromJson(a.geometry);
          this.addPtSymbolStyle(d, a.key, a.properties, a.id);
        } else
          'Arrow' == a.properties.type &&
            this.addLineSymbolStyle(a.geometry.coordinates, a.key, a.properties);
      }
      b = [];
      for (c = 0; c < null.length; c++) {
        d = null.get(c);
        var e = this.getCoordinates([d.position]);
        a = d._imageId;
        a = a.split('_')[1];
        b.push({
          type: 'Feature',
          id: d.id,
          key: a,
          properties: d.style,
          geometry: { type: 'Point', coordinates: e[0] },
        });
      }
      return { features: b };
    };
    a.prototype.savePtSymbol = function() {
      for (var a = [], b = 0; b < null.length; b++) {
        var c = null.get(b),
          d = this.getCoordinates([c.position]),
          e = c._imageId.split('_')[1];
        a.push({
          type: 'Feature',
          id: c.id,
          key: e,
          properties: c.style,
          geometry: { type: 'Point', coordinates: d[0] },
        });
      }
      return { features: a };
    };
    a.prototype.saveLineSymbols = function() {
      for (var a = [], b = 0; b < f.length; b++) {
        var c = f[b],
          d = this.getCoordinates(c.positions);
        a.push({
          type: 'Feature',
          id: c.id,
          key: c.keyid,
          properties: c.style,
          geometry: { type: 'Arrow', coordinates: d },
        });
      }
      return { features: a };
    };
    a.prototype.saveSymbols = function() {
      for (var a = [], b = 0; b < null.length; b++) {
        var c = null.get(b),
          d = this.getCoordinates([c.position]),
          e = c._imageId.split('_')[1];
        c = {
          type: 'Feature',
          id: c.id,
          key: e,
          properties: c.style,
          geometry: { type: 'Point', coordinates: d[0] },
        };
        a.push(c);
      }
      for (b = 0; b < f.length; b++)
        (c = f[b]),
          (d = this.getCoordinates(c.positions)),
          (c = {
            type: 'Feature',
            id: c.id,
            key: c.keyid,
            properties: c.style,
            geometry: { type: 'Arrow', coordinates: d },
          }),
          a.push(c);
      return { features: a };
    };
    var k = {};
    a.prototype.showSymbolPanel = function(a, b) {
      layer.open({
        type: 2,
        shade: 0,
        skin: 'layer-mars-dialog animation-scale-up',
        id: 'LAY_layuipro',
        name: 'MySymbolFrame',
        title: '\u7b26\u53f7\u5e93\u7ec4\u4ef6',
        maxmin: !1,
        shadeClose: !0,
        offset: [a, b],
        area: ['400px', '620px'],
        moveType: 1,
        content: '/view.html',
        success: function(a) {
          k._dom = a;
        },
      });
    };
    a.prototype.updateAttribute = function(a, b) {
      a = a || {};
      a.style = a.style || {};
      null == b &&
        (b = {
          scale: 1,
          horizontalOrigin: Cesium.HorizontalOrigin.CENTER,
          verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
        });
      for (var d in a.style) {
        var e = a.style[d];
        switch (d) {
          default:
            b[d] = e;
            break;
          case 'font_style':
          case 'font_weight':
          case 'font_family':
          case 'text':
          case 'scaleByDistance_near':
          case 'scaleByDistance_nearValue':
          case 'scaleByDistance_far':
          case 'scaleByDistance_farValue':
          case 'distanceDisplayCondition_far':
          case 'distanceDisplayCondition_near':
          case 'background_opacity':
            break;
          case 'font_size':
            b.font_size = e;
            break;
          case 'color':
            b.fillColor = new Cesium.Color.fromCssColorString(e || '#ffffff').withAlpha(
              Number(a.style.opacity || 1)
            );
            break;
          case 'border':
            b.style = e ? Cesium.LabelStyle.FILL_AND_OUTLINE : Cesium.LabelStyle.FILL;
            break;
          case 'border_color':
            b.outlineColor = new Cesium.Color.fromCssColorString(e || '#000000').withAlpha(
              Number(a.style.opacity || 1)
            );
            break;
          case 'border_width':
            b.outlineWidth = e;
            break;
          case 'background':
            b.showBackground = e;
            break;
          case 'background_color':
            b.backgroundColor = new Cesium.Color.fromCssColorString(e || '#000000').withAlpha(
              Number(a.style.background_opacity || a.style.opacity || 0.5)
            );
            break;
          case 'pixelOffset':
            b.pixelOffset = new Cesium.Cartesian2(a.style.pixelOffset[0], a.style.pixelOffset[1]);
            break;
          case 'scaleByDistance':
            b.scaleByDistance = e
              ? new Cesium.NearFarScalar(
                  Number(a.style.scaleByDistance_near || 1e3),
                  Number(a.style.scaleByDistance_nearValue || 1),
                  Number(a.style.scaleByDistance_far || 1e6),
                  Number(a.style.scaleByDistance_farValue || 0.1)
                )
              : null;
            break;
          case 'distanceDisplayCondition':
            b.distanceDisplayCondition = e
              ? new Cesium.DistanceDisplayCondition(
                  Number(a.style.distanceDisplayCondition_near || 0),
                  Number(a.style.distanceDisplayCondition_far || 1e5)
                )
              : null;
            break;
          case 'symbolSize':
            b.symbolSize = 40 + 300 * e;
            break;
          case 'textx':
            b.textx = 1600 * e;
            break;
          case 'texty':
            b.texty = 1600 * e;
        }
      }
      b.text = a.style.text;
      a =
        (a.style.font_style || 'normal') +
        ' small-caps ' +
        (a.style.font_weight || 'normal') +
        ' ' +
        (a.style.font_size || '25') +
        'px ' +
        (a.style.font_family || '\u6977\u4f53');
      b.font = a;
      if (1 == g_pickObj.type) {
        a = window[k._dom.find('iframe')[0].name];
        d = c(b, g);
        e = g_pickObj.obj.style;
        for (var f in d) e[f] = d[f];
        g_pickObj.obj.setImage(
          'gg_' + g_pickObj.gid + '_' + Math.random(),
          a.drawSymbol(g_pickObj.gid, d)
        );
        g_pickObj.obj.setEditable();
      } else
        null != g_pickObj.type &&
          ((f = Cesium.Material.fromType('Color')),
          (f.uniforms.color = b.fillColor),
          (g_pickObj.obj.material = f),
          (g_pickObj.obj.style.fillColor = b.fillColor));
      return b;
    };
    return a;
  })(),
  g_pickObj = { type: null, obj: null };
var GH5JB = function(a) {
  if (!(this instanceof GH5JB)) return new GH5JB(a);
  this._canvas = a = 'string' === typeof a ? document.getElementById(a) : a;
  this._ctx = a.getContext('2d');
  this._width = a.width;
  this._height = a.height;
  this._outlineWidth = 1;
  this._outlineColor = 'black';
  this._color = 'red';
  this._keyid = 2001;
  this._data = [];
};
GH5JB.prototype = {
  width: function(a) {
    this._width = a;
    return this;
  },
  height: function(a) {
    this._height = a;
    return this;
  },
  keyid: function(a) {
    this._keyid = a;
    return this;
  },
  color: function(a) {
    this._color = a;
    return this;
  },
  outlineWidth: function(a) {
    this._outlineWidth = a;
    return this;
  },
  outlineColor: function(a) {
    this._outlineColor = a;
    return this;
  },
  data: function(a) {
    this._data = a;
    return this;
  },
  add: function(a) {
    this._data.push(a);
    return this;
  },
  draw: function() {
    var a = this._ctx;
    a.lineCap = 'round';
    this._drawOutline(a);
    this._drawHotline(a);
    return this;
  },
  _drawOutline: function(a) {},
  _drawHotline: function(a) {
    var b;
    if (this._outlineWidth) {
      var c = this._data.length;
      for (b = 0; b < c; b++) {
        var d = this._data[b];
        a.lineWidth = this._outlineWidth;
        var e = !1;
        var f = [];
        if (2001 == this._keyid) {
          if (4 <= d.length) {
            for (e = 0; 4 > e; e++) f.push(d[e].x), f.push(d[e].y);
            e = !0;
          }
        } else if (2003 == this._keyid || 2004 == this._keyid) {
          for (e = 0; 2 > e; e++) f.push(d[e].x), f.push(d[e].y);
          e = !0;
        } else if (2005 == this._keyid || 2006 == this._keyid) {
          if (3 <= d.length) {
            for (e = 0; 3 > e; e++) f.push(d[e].x), f.push(d[e].y);
            e = !0;
          }
        } else if (2011 == this._keyid) {
          if (3 <= d.length) {
            for (e = 0; 3 > e; e++) f.push(d[e].x), f.push(d[e].y);
            e = !0;
          }
        } else if ((2008 == this._keyid || 2007 == this._keyid) && 3 <= d.length) {
          for (e = 0; e < d.length; e++) f.push(d[e].x), f.push(d[e].y);
          e = !0;
        }
        if (1 == e) {
          d = H5JB_getJBArray(this._keyid, f);
          a.strokeStyle = this._outlineColor;
          a.beginPath();
          f = d[0];
          a.moveTo(f[0], f[1]);
          for (f = 1; f < d.length; f++) (e = d[f]), a.lineTo(e[0], e[1]);
          a.stroke();
          a.closePath();
          a.fillStyle = this._color;
          a.fill();
        }
      }
    }
  },
};
var Renderer = GMap.Canvas.extend({
    _initContainer: function() {
      GMap.Canvas.prototype._initContainer.call(this);
      this._hotline = new GH5JB(this._container);
    },
    _update: function() {
      GMap.Canvas.prototype._update.call(this);
      this._hotline.width(this._container.width);
      this._hotline.height(this._container.height);
    },
    _updatePoly: function(a) {
      if (this._drawing) {
        var b = a._parts;
        b.length && (this._updateOptions(a), this._hotline.data(b).draw());
      }
    },
    _updateOptions: function(a) {
      null != a.options.outlineWidth && this._hotline.outlineWidth(a.options.outlineWidth);
      null != a.options.outlineColor && this._hotline.outlineColor(a.options.outlineColor);
      null != a.options.color && this._hotline.color(a.options.color);
      null != a.options.keyid && this._hotline.keyid(a.options.keyid);
    },
  }),
  renderer = function(a) {
    return GMap.Browser.canvas ? new Renderer(a) : null;
  },
  Util = {
    clipSegment: function(a, b, c, d, e) {
      d = d ? this._lastCode : GMap.LineUtil._getBitCode(a, c);
      var f = GMap.LineUtil._getBitCode(b, c);
      for (this._lastCode = f; ; )
        if (d | f) {
          if (d & f) return !1;
          var g = d || f;
          var h = GMap.LineUtil._getEdgeIntersection(a, b, g, c, e);
          var k = GMap.LineUtil._getBitCode(h, c);
          g === d ? ((h.z = a.z), (a = h), (d = k)) : ((h.z = b.z), (b = h), (f = k));
        } else return [a, b];
    },
  };
GMap.GH5JB = GMap.Polyline.extend({
  statics: { Renderer: Renderer, renderer: renderer },
  options: { renderer: renderer(), min: 0, max: 1, outlineColor: 'black', outlineWidth: 1 },
  _projectLatlngs: function(a, b, c) {
    var d = a.length,
      e;
    if (a[0] instanceof GMap.LatLng) {
      var f = [];
      for (e = 0; e < d; e++)
        (f[e] = this._map.latLngToLayerPoint(a[e])), (f[e].z = a[e].alt), c.extend(f[e]);
      b.push(f);
    } else for (e = 0; e < d; e++) this._projectLatlngs(a[e], b, c);
  },
  _clipPoints: function() {
    if (this.options.noClip) this._parts = this._rings;
    else {
      var a = (this._parts = []),
        b = this._renderer._bounds,
        c,
        d,
        e,
        f;
      var g = (c = 0);
      for (d = this._rings.length; c < d; c++) {
        var h = this._rings[c];
        var k = 0;
        for (e = h.length; k < e - 1; k++)
          if ((f = Util.clipSegment(h[k], h[k + 1], b, k, !0)))
            if (((a[g] = a[g] || []), a[g].push(f[0]), f[1] !== h[k + 1] || k === e - 2))
              a[g].push(f[1]), g++;
      }
    }
  },
  _clickTolerance: function() {
    return this.options.weight / 2 + this.options.outlineWidth + (GMap.Browser.touch ? 10 : 0);
  },
});
GMap.Draw.H5JBLineSymbol = GMap.Draw.Feature.extend({
  statics: { TYPE: 'polyline' },
  Poly: GMap.GH5JB,
  options: {
    allowIntersection: !0,
    repeatMode: !1,
    drawError: { color: '#b00b00', timeout: 2500 },
    icon: new GMap.DivIcon({
      iconSize: new GMap.Point(8, 8),
      className: 'gmap-div-icon gmap-editing-icon',
    }),
    touchIcon: new GMap.DivIcon({
      iconSize: new GMap.Point(20, 20),
      className: 'gmap-div-icon gmap-editing-icon gmap-touch-icon',
    }),
    guidelineDistance: 20,
    maxGuideLineLength: 4e3,
    shapeOptions: {
      stroke: !0,
      color: '#3388ff',
      weight: 4,
      opacity: 0.5,
      fill: !1,
      clickable: !0,
    },
    metric: !0,
    feet: !0,
    nautic: !1,
    showLength: !0,
    zIndexOffset: 2e3,
    factor: 1,
    maxPoints: 0,
  },
  initialize: function(a, b) {
    GMap.Browser.touch && (this.options.icon = this.options.touchIcon);
    this.options.drawError.message = GMap.drawLocal.draw.handlers.polyline.error;
    b && b.drawError && (b.drawError = GMap.Util.extend({}, this.options.drawError, b.drawError));
    this.type = GMap.Draw.H5JBLineSymbol.TYPE;
    GMap.Draw.Feature.prototype.initialize.call(this, a, b);
  },
  addHooks: function() {
    GMap.Draw.Feature.prototype.addHooks.call(this);
    this._map &&
      ((this._markers = []),
      (this._markerGroup = new GMap.LayerGroup()),
      this._map.addLayer(this._markerGroup),
      (this._poly = new GMap.Polyline([], this.options.shapeOptions)),
      this._tooltip.updateContent(this._getTooltipText()),
      this._mouseMarker ||
        (this._mouseMarker = GMap.marker(this._map.getCenter(), {
          icon: GMap.divIcon({
            className: 'gmap-mouse-marker',
            iconAnchor: [20, 20],
            iconSize: [40, 40],
          }),
          opacity: 0,
          zIndexOffset: this.options.zIndexOffset,
        })),
      this._mouseMarker
        .on('mouseout', this._onMouseOut, this)
        .on('mousemove', this._onMouseMove, this)
        .on('mousedown', this._onMouseDown, this)
        .on('mouseup', this._onMouseUp, this)
        .addTo(this._map),
      this._map
        .on('mouseup', this._onMouseUp, this)
        .on('mousemove', this._onMouseMove, this)
        .on('zoomlevelschange', this._onZoomEnd, this)
        .on('touchstart', this._onTouch, this)
        .on('zoomend', this._onZoomEnd, this));
  },
  removeHooks: function() {
    GMap.Draw.Feature.prototype.removeHooks.call(this);
    this._clearHideErrorTimeout();
    this._cleanUpShape();
    this._map.removeLayer(this._markerGroup);
    delete this._markerGroup;
    delete this._markers;
    this._map.removeLayer(this._poly);
    delete this._poly;
    this._mouseMarker
      .off('mousedown', this._onMouseDown, this)
      .off('mouseout', this._onMouseOut, this)
      .off('mouseup', this._onMouseUp, this)
      .off('mousemove', this._onMouseMove, this);
    this._map.removeLayer(this._mouseMarker);
    delete this._mouseMarker;
    this._clearGuides();
    this._map
      .off('mouseup', this._onMouseUp, this)
      .off('mousemove', this._onMouseMove, this)
      .off('zoomlevelschange', this._onZoomEnd, this)
      .off('zoomend', this._onZoomEnd, this)
      .off('touchstart', this._onTouch, this)
      .off('click', this._onTouch, this);
  },
  deleteLastVertex: function() {
    if (!(1 >= this._markers.length)) {
      var a = this._markers.pop(),
        b = this._poly,
        c = b.getLatLngs(),
        d = c.splice(-1, 1)[0];
      this._poly.setLatLngs(c);
      this._markerGroup.removeLayer(a);
      2 > b.getLatLngs().length && this._map.removeLayer(b);
      this._vertexChanged(d, !1);
    }
  },
  addVertex: function(a) {
    2 <= this._markers.length &&
    !this.options.allowIntersection &&
    this._poly.newLatLngIntersects(a)
      ? this._showErrorTooltip()
      : (this._errorShown && this._hideErrorTooltip(),
        this._markers.push(this._createMarker(a)),
        this._poly.addLatLng(a),
        2 === this._poly.getLatLngs().length && this._map.addLayer(this._poly),
        this._vertexChanged(a, !0));
  },
  completeShape: function() {
    1 >= this._markers.length ||
      !this._shapeIsValid() ||
      (this._fireCreatedEvent(), this.disable(), this.options.repeatMode && this.enable());
  },
  _finishShape: function() {
    var a = this._poly._defaultShape ? this._poly._defaultShape() : this._poly.getLatLngs();
    a = this._poly.newLatLngIntersects(a[a.length - 1]);
    (!this.options.allowIntersection && a) || !this._shapeIsValid()
      ? this._showErrorTooltip()
      : (this._fireCreatedEvent(), this.disable(), this.options.repeatMode && this.enable());
  },
  _shapeIsValid: function() {
    return !0;
  },
  _onZoomEnd: function() {
    null !== this._markers && this._updateGuide();
  },
  _onMouseMove: function(a) {
    var b = this._map.mouseEventToLayerPoint(a.originalEvent),
      c = this._map.layerPointToLatLng(b);
    this._currentLatLng = c;
    this._updateTooltip(c);
    this._updateGuide(b);
    this._mouseMarker.setLatLng(c);
    GMap.DomEvent.preventDefault(a.originalEvent);
  },
  _vertexChanged: function(a, b) {
    this._map.fire(GMap.Draw.Event.DRAWVERTEX, { layers: this._markerGroup });
    this._updateFinishHandler();
    this._updateRunningMeasure(a, b);
    this._clearGuides();
    this._updateTooltip();
  },
  _onMouseDown: function(a) {
    this._clickHandled ||
      this._touchHandled ||
      this._disableMarkers ||
      (this._onMouseMove(a),
      (this._clickHandled = !0),
      this._disableNewMarkers(),
      (a = a.originalEvent),
      this._startPoint.call(this, a.clientX, a.clientY));
  },
  _startPoint: function(a, b) {
    this._mouseDownOrigin = GMap.point(a, b);
  },
  _onMouseUp: function(a) {
    var b = a.originalEvent;
    this._endPoint.call(this, b.clientX, b.clientY, a);
    this._clickHandled = null;
  },
  _endPoint: function(a, b, c) {
    this._mouseDownOrigin &&
      ((a = GMap.point(a, b).distanceTo(this._mouseDownOrigin)),
      (b = this._calculateFinishDistance(c.latlng)),
      1 < this.options.maxPoints && this.options.maxPoints == this._markers.length + 1
        ? (this.addVertex(c.latlng), this._finishShape())
        : 10 > b && GMap.Browser.touch
        ? this._finishShape()
        : Math.abs(a) < 9 * (window.devicePixelRatio || 1) && this.addVertex(c.latlng),
      this._enableNewMarkers());
    this._mouseDownOrigin = null;
  },
  _onTouch: function(a) {
    var b = a.originalEvent;
    if (
      b.touches &&
      b.touches[0] &&
      !this._clickHandled &&
      !this._touchHandled &&
      !this._disableMarkers
    ) {
      var c = b.touches[0].clientX;
      b = b.touches[0].clientY;
      this._disableNewMarkers();
      this._touchHandled = !0;
      this._startPoint.call(this, c, b);
      this._endPoint.call(this, c, b, a);
      this._touchHandled = null;
    }
    this._clickHandled = null;
  },
  _onMouseOut: function() {
    this._tooltip && this._tooltip._onMouseOut.call(this._tooltip);
  },
  _calculateFinishDistance: function(a) {
    if (0 < this._markers.length) {
      if (this.type === GMap.Draw.Polyline.TYPE) var b = this._markers[this._markers.length - 1];
      else if (this.type === GMap.Draw.Polygon.TYPE) b = this._markers[0];
      else return Infinity;
      b = this._map.latLngToContainerPoint(b.getLatLng());
      a = new GMap.Marker(a, {
        icon: this.options.icon,
        zIndexOffset: 2 * this.options.zIndexOffset,
      });
      a = this._map.latLngToContainerPoint(a.getLatLng());
      b = b.distanceTo(a);
    } else b = Infinity;
    return b;
  },
  _updateFinishHandler: function() {
    var a = this._markers.length;
    if (1 < a) this._markers[a - 1].on('click', this._finishShape, this);
    2 < a && this._markers[a - 2].off('click', this._finishShape, this);
  },
  _createMarker: function(a) {
    a = new GMap.Marker(a, {
      icon: this.options.icon,
      zIndexOffset: 2 * this.options.zIndexOffset,
    });
    this._markerGroup.addLayer(a);
    return a;
  },
  _updateGuide: function(a) {
    var b = this._markers ? this._markers.length : 0;
    0 < b &&
      ((a = a || this._map.latLngToLayerPoint(this._currentLatLng)),
      this._clearGuides(),
      this._drawGuide(this._map.latLngToLayerPoint(this._markers[b - 1].getLatLng()), a));
  },
  _updateTooltip: function(a) {
    var b = this._getTooltipText();
    a && this._tooltip.updatePosition(a);
    this._errorShown || this._tooltip.updateContent(b);
  },
  _drawGuide: function(a, b) {
    var c = Math.floor(Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2))),
      d = this.options.guidelineDistance,
      e = this.options.maxGuideLineLength;
    d = c > e ? c - e : d;
    this._guidesContainer ||
      (this._guidesContainer = GMap.DomUtil.create('div', 'gmap-draw-guides', this._overlayPane));
    for (; d < c; d += this.options.guidelineDistance) {
      e = d / c;
      e = { x: Math.floor(a.x * (1 - e) + e * b.x), y: Math.floor(a.y * (1 - e) + e * b.y) };
      var f = GMap.DomUtil.create('div', 'gmap-draw-guide-dash', this._guidesContainer);
      f.style.backgroundColor = this._errorShown
        ? this.options.drawError.color
        : this.options.shapeOptions.color;
      GMap.DomUtil.setPosition(f, e);
    }
  },
  _updateGuideColor: function(a) {
    if (this._guidesContainer)
      for (var b = 0, c = this._guidesContainer.childNodes.length; b < c; b++)
        this._guidesContainer.childNodes[b].style.backgroundColor = a;
  },
  _clearGuides: function() {
    if (this._guidesContainer)
      for (; this._guidesContainer.firstChild; )
        this._guidesContainer.removeChild(this._guidesContainer.firstChild);
  },
  _getTooltipText: function() {
    var a = this.options.showLength;
    0 === this._markers.length
      ? (a = { text: GMap.drawLocal.draw.handlers.polyline.tooltip.start })
      : ((a = a ? this._getMeasurementString() : ''),
        (a =
          1 === this._markers.length
            ? { text: GMap.drawLocal.draw.handlers.polyline.tooltip.cont, subtext: a }
            : { text: GMap.drawLocal.draw.handlers.polyline.tooltip.end, subtext: a }));
    return a;
  },
  _updateRunningMeasure: function(a, b) {
    var c = this._markers.length;
    1 === this._markers.length
      ? (this._measurementRunningTotal = 0)
      : ((c -= b ? 2 : 1),
        (a = GMap.GeometryUtil.isVersion07x()
          ? a.distanceTo(this._markers[c].getLatLng()) * (this.options.factor || 1)
          : this._map.distance(a, this._markers[c].getLatLng()) * (this.options.factor || 1)),
        (this._measurementRunningTotal += a * (b ? 1 : -1)));
  },
  _getMeasurementString: function() {
    var a = this._currentLatLng,
      b = this._markers[this._markers.length - 1].getLatLng();
    a = GMap.GeometryUtil.isVersion07x()
      ? b && a && a.distanceTo
        ? this._measurementRunningTotal + a.distanceTo(b) * (this.options.factor || 1)
        : this._measurementRunningTotal || 0
      : b && a
      ? this._measurementRunningTotal + this._map.distance(a, b) * (this.options.factor || 1)
      : this._measurementRunningTotal || 0;
    return GMap.GeometryUtil.readableDistance(
      a,
      this.options.metric,
      this.options.feet,
      this.options.nautic,
      this.options.precision
    );
  },
  _showErrorTooltip: function() {
    this._errorShown = !0;
    this._tooltip.showAsError().updateContent({ text: this.options.drawError.message });
    this._updateGuideColor(this.options.drawError.color);
    this._poly.setStyle({ color: this.options.drawError.color });
    this._clearHideErrorTimeout();
    this._hideErrorTimeout = setTimeout(
      GMap.Util.bind(this._hideErrorTooltip, this),
      this.options.drawError.timeout
    );
  },
  _hideErrorTooltip: function() {
    this._errorShown = !1;
    this._clearHideErrorTimeout();
    this._tooltip.removeError().updateContent(this._getTooltipText());
    this._updateGuideColor(this.options.shapeOptions.color);
    this._poly.setStyle({ color: this.options.shapeOptions.color });
  },
  _clearHideErrorTimeout: function() {
    this._hideErrorTimeout &&
      (clearTimeout(this._hideErrorTimeout), (this._hideErrorTimeout = null));
  },
  _disableNewMarkers: function() {
    this._disableMarkers = !0;
  },
  _enableNewMarkers: function() {
    setTimeout(
      function() {
        this._disableMarkers = !1;
      }.bind(this),
      50
    );
  },
  _cleanUpShape: function() {
    1 < this._markers.length &&
      this._markers[this._markers.length - 1].off('click', this._finishShape, this);
  },
  _fireCreatedEvent: function() {
    var a = new this.Poly(this._poly.getLatLngs(), this.options.shapeOptions);
    GMap.Draw.Feature.prototype._fireCreatedEvent.call(this, a);
  },
});
